import java.util.ArrayList;
import java.util.Random;

public class CreateGraph {

	public static void main(String[] args) {

		// CreateGraph p = new CreateGraph();
		//
		// p.getRandomGraph(6, 0).toTxt();
		Graph p = new Graph(9);
		p.addEdge(0, 1);
		p.addEdge(0, 8);
		p.addEdge(8, 2);
		p.addEdge(8, 6);
		p.addEdge(2, 3);
		p.addEdge(2, 4);
		p.addEdge(2, 5);
		p.addEdge(5, 6);
		p.addEdge(4, 7);
		p.addEdge(7, 6);
		p.addEdge(6, 8);

		DFS n = new DFS();
		
		boolean d[] = new boolean[9];
		int h[] = new int[9];
//		n.algorithmDFS(p, 0, 7, d);
//		n.searchPath(7);
		BFS s = new BFS();
		System.out.println(s.pathBFS(p,0, 2));
		s.pathDFS(p, 1, 7, d, h, new int [9]);;
		//System.out.println(n.getAllpath().toString());
//		System.out.println(n.algorithmDFS(0, 7, d, new ArrayList<>(),p,0));
	}



	public int getRandomNumber(int max) {
		int number = 0;
		Random rnd = new Random();
		number = (int) (rnd.nextDouble() * (max + 1));
		return number;
	}

	public Graph getRandomGraph(int n, double p) {

		Graph newGraph = new Graph(n);
		int a = 0;
		int b = 0;
		for (int i = 0; i < n; i++) {
			a = getRandomNumber(n - 1);
			b = getRandomNumber(n - 1);
			if (a != b) {
				newGraph.addEdge(a, b);
				newGraph.addEdge(b, a);
			}
		}

		return newGraph;
	}
}
